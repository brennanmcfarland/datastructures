
PROBLEM #1:
F - counterexample:
  Suppose two functions exist with worst case running time O(n). One function
  could have best case running time omega(n) and another omega(logn), depending
  on the type of algorithm used.

PROBLEM #2:
public void reverse(){
  if(listsize < 2)
    break;
  listNode front = head;
  listNode back = tail;
  listNode temp = new listNode();
  //iterate through the list, switching the two indices' values until
  //you get to the middle of the list
  for(int i=0;i<=list.size()/2;i++){
    front = front.next;
    back = back.prev;
    temp.value = front.value;
    front.value = back.value;
    back.value = temp.value;
  }
}

PROBLEM #3:
public interface intStack{
  public void push(int i);
  public int pop();
  public int peek();
  public boolean isEmpty();
  public boolean isFull();
}

public class intStackDemo{
  public static void main(String[] args){
    string expression = "37*2+";
    System.out.println("The postfix expression evaluated is
      +postfixExpr(expression));
  }
  //evaluate the postfix expression
  public static int postfixExpr(String expr){
    int operand1,
        operand2;
    MyIntStack  stack = new MyIntStack();
    //for every character
    for(int i=0;i<expr.length;i++){
      switch(expr.charAt(i)){
      //if it's an operand, evaluate it on the last 2 values of the stack
      case "+":
        stack.push(stack.pop()+stack.pop());
        break;
      case "-":
        stack.push(stack.pop()-stack.pop());
        break;
      case "*":
        stack.push(stack.pop()*stack.pop());
        break;
      case "/":
        stack.push(stack.pop()/stack.pop());
        break;
      default:
        //if it's a #, push to the stack
        stack.push(expr.charAt(i)(int));
      }
    }
  }
}

PROBLEM #4:
//count the # nodes in T
public int nodeCount(node T){
  int numnodes = 1;
  if(T.left != null)
    numnodes += nodeCount(T.left);
  if(T.right != null)
    numnodes += nodeCount(T.right);
  return numnodes;
}
//count the # leaf nodes in T
public int leafCount(node T){
  int numnodes = 0;
  if(T.left != null)
    numnodes += leafCount(T.left);
  if(T.right != null)
    numnodes += leafCount(T.right);
  else if(T.left == null)
    return 1;
}
//count # non-internal nodes in T
public int nonleafCount(node T){
  /* since both methods are O(N) and I'm merely calling one of each, the result
    is still O(N) since constants drop out and thus it still meets the accepted
    standard for code efficiency, and it also exploits code reusability, thus
    making it a better solution than writing an entirely new algorithm */
  return nodeCount(T)-leafCount(T);
}

To arrange the nodes into a perfect binary tree is possible for n%2=1, ie all
odd n because other than the root node, every node must be one of two children

PROBLEM #5:
//assuming that a node of = value would go to the right
public boolean hasOrderProp(TreeNode rootNode){
  if (rootNode.left exists AND rootNode.left.value greater or = rootNode.value)
    OR (rootNode.right exists AND rootNode.right.value lessthn rootNode.value)
    return false;
  else
    if hasOrderProp(rootNode.left) AND hasOrderProp(rootNode.right)
      return true;
}

PROBLEM #6:
      6
    3   8
  1  5

PROBLEM #7:
i.
            M
          D
        F
     E     I
  B   G   J K
 A C   H     L
ii.
             D
        F       M
    A      I
  B   G   J K
 X C   H
