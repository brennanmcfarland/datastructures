problem 3

void insert(T item){
  items[numitems] = item;
  numitems++;
  siftUp(numitems-1);
}
T removeMax(){
  T toRemove = items[0];
  items[0] = items[numitems-1];
  siftDown(0);
}
void siftUp(int i){
  T toSift = items[i];
  int child = i;
  int parent = (i-1)/2;
  while(parent > 0){
    //determine if a switch needs to be made, if not, exit the loop
    if(toSift.compareTo(items[parent]) < 0)
      break;
    //make the switch if necessary, to be compared again
    items[child] = items[parent];
    items[parent] = toSift;
    child = parent;
    parent = (child-1)/2;
  }
  //and place the item in its appropriately sifted spot
  items[child] = toSift;
}
void siftDown(int i){
  T toSift = items[i];
  int parent = i;
  int child = i*2+1;
  while(child < numItems){
    //determine which child to compare to
    if(child+1 < numItems && items[child].compareTo(items[child+1]) < 0)
      child++;
    //determine if a switch needs to be made, if not, exit the loop
    if(toSift.compareTo(items[child]) >= 0)
      break;
    //make the switch if necessary, to be compared again
    items[parent] = items[child];
    items[child] = toSift;
    parent = child;
    child = 2*parent+1;
  }
  //and place the item in its appropriately sifted spot
  items[parent] = toSift;
}
